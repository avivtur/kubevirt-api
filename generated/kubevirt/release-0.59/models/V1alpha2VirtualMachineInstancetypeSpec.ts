/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V1GPU,
    V1GPUFromJSON,
    V1GPUFromJSONTyped,
    V1GPUToJSON,
    V1HostDevice,
    V1HostDeviceFromJSON,
    V1HostDeviceFromJSONTyped,
    V1HostDeviceToJSON,
    V1LaunchSecurity,
    V1LaunchSecurityFromJSON,
    V1LaunchSecurityFromJSONTyped,
    V1LaunchSecurityToJSON,
    V1alpha2CPUInstancetype,
    V1alpha2CPUInstancetypeFromJSON,
    V1alpha2CPUInstancetypeFromJSONTyped,
    V1alpha2CPUInstancetypeToJSON,
    V1alpha2MemoryInstancetype,
    V1alpha2MemoryInstancetypeFromJSON,
    V1alpha2MemoryInstancetypeFromJSONTyped,
    V1alpha2MemoryInstancetypeToJSON,
} from './';

/**
 * VirtualMachineInstancetypeSpec is a description of the VirtualMachineInstancetype or VirtualMachineClusterInstancetype.
 * 
 * CPU and Memory are required attributes with both requiring that their Guest attribute is defined, ensuring a number of vCPUs and amount of RAM is always provided by each instancetype.
 * @export
 * @interface V1alpha2VirtualMachineInstancetypeSpec
 */
export interface V1alpha2VirtualMachineInstancetypeSpec {
    /**
     * 
     * @type {V1alpha2CPUInstancetype}
     * @memberof V1alpha2VirtualMachineInstancetypeSpec
     */
    cpu: V1alpha2CPUInstancetype;
    /**
     * Optionally defines any GPU devices associated with the instancetype.
     * @type {Array<V1GPU>}
     * @memberof V1alpha2VirtualMachineInstancetypeSpec
     */
    gpus?: Array<V1GPU>;
    /**
     * Optionally defines any HostDevices associated with the instancetype.
     * @type {Array<V1HostDevice>}
     * @memberof V1alpha2VirtualMachineInstancetypeSpec
     */
    hostDevices?: Array<V1HostDevice>;
    /**
     * Optionally defines the IOThreadsPolicy to be used by the instancetype.
     * @type {string}
     * @memberof V1alpha2VirtualMachineInstancetypeSpec
     */
    ioThreadsPolicy?: string;
    /**
     * 
     * @type {V1LaunchSecurity}
     * @memberof V1alpha2VirtualMachineInstancetypeSpec
     */
    launchSecurity?: V1LaunchSecurity;
    /**
     * 
     * @type {V1alpha2MemoryInstancetype}
     * @memberof V1alpha2VirtualMachineInstancetypeSpec
     */
    memory: V1alpha2MemoryInstancetype;
}

export function V1alpha2VirtualMachineInstancetypeSpecFromJSON(json: any): V1alpha2VirtualMachineInstancetypeSpec {
    return V1alpha2VirtualMachineInstancetypeSpecFromJSONTyped(json, false);
}

export function V1alpha2VirtualMachineInstancetypeSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1alpha2VirtualMachineInstancetypeSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cpu': V1alpha2CPUInstancetypeFromJSON(json['cpu']),
        'gpus': !exists(json, 'gpus') ? undefined : ((json['gpus'] as Array<any>).map(V1GPUFromJSON)),
        'hostDevices': !exists(json, 'hostDevices') ? undefined : ((json['hostDevices'] as Array<any>).map(V1HostDeviceFromJSON)),
        'ioThreadsPolicy': !exists(json, 'ioThreadsPolicy') ? undefined : json['ioThreadsPolicy'],
        'launchSecurity': !exists(json, 'launchSecurity') ? undefined : V1LaunchSecurityFromJSON(json['launchSecurity']),
        'memory': V1alpha2MemoryInstancetypeFromJSON(json['memory']),
    };
}

export function V1alpha2VirtualMachineInstancetypeSpecToJSON(value?: V1alpha2VirtualMachineInstancetypeSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cpu': V1alpha2CPUInstancetypeToJSON(value.cpu),
        'gpus': value.gpus === undefined ? undefined : ((value.gpus as Array<any>).map(V1GPUToJSON)),
        'hostDevices': value.hostDevices === undefined ? undefined : ((value.hostDevices as Array<any>).map(V1HostDeviceToJSON)),
        'ioThreadsPolicy': value.ioThreadsPolicy,
        'launchSecurity': V1LaunchSecurityToJSON(value.launchSecurity),
        'memory': V1alpha2MemoryInstancetypeToJSON(value.memory),
    };
}

