/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { V1Disk } from './V1Disk';
import { V1Filesystem } from './V1Filesystem';
import { V1GPU } from './V1GPU';
import { V1HostDevice } from './V1HostDevice';
import { V1Input } from './V1Input';
import { V1Interface } from './V1Interface';
import { V1SoundDevice } from './V1SoundDevice';
import { V1Watchdog } from './V1Watchdog';
import { HttpFile } from '../http/http';

export class V1Devices {
    /**
    * Whether to attach the default graphics device or not. VNC will not be available if set to false. Defaults to true.
    */
    'autoattachGraphicsDevice'?: boolean;
    /**
    * Whether to attach the Memory balloon device with default period. Period can be adjusted in virt-config. Defaults to true.
    */
    'autoattachMemBalloon'?: boolean;
    /**
    * Whether to attach a pod network interface. Defaults to true.
    */
    'autoattachPodInterface'?: boolean;
    /**
    * Whether to attach the default serial console or not. Serial console access will not be available if set to false. Defaults to true.
    */
    'autoattachSerialConsole'?: boolean;
    /**
    * Whether or not to enable virtio multi-queue for block devices. Defaults to false.
    */
    'blockMultiQueue'?: boolean;
    /**
    * Represent a subset of client devices that can be accessed by VMI. At the moment only, USB devices using Usbredir's library and tooling. Another fit would be a smartcard with libcacard.  The struct is currently empty as there is no imediate request for user-facing APIs. This structure simply turns on USB redirection of UsbClientPassthroughMaxNumberOf devices.
    */
    'clientPassthrough'?: any;
    /**
    * DisableHotplug disabled the ability to hotplug disks.
    */
    'disableHotplug'?: boolean;
    /**
    * Disks describes disks, cdroms, floppy and luns which are connected to the vmi.
    */
    'disks'?: Array<V1Disk>;
    /**
    * Filesystems describes filesystem which is connected to the vmi.
    */
    'filesystems'?: Array<V1Filesystem>;
    /**
    * Whether to attach a GPU device to the vmi.
    */
    'gpus'?: Array<V1GPU>;
    /**
    * Whether to attach a host device to the vmi.
    */
    'hostDevices'?: Array<V1HostDevice>;
    /**
    * Inputs describe input devices
    */
    'inputs'?: Array<V1Input>;
    /**
    * Interfaces describe network interfaces which are added to the vmi.
    */
    'interfaces'?: Array<V1Interface>;
    /**
    * If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.
    */
    'networkInterfaceMultiqueue'?: boolean;
    /**
    * Rng represents the random device passed from host
    */
    'rng'?: any;
    'sound'?: V1SoundDevice;
    /**
    * Fall back to legacy virtio 0.9 support if virtio bus is selected on devices. This is helpful for old machines like CentOS6 or RHEL6 which do not understand virtio_non_transitional (virtio 1.0).
    */
    'useVirtioTransitional'?: boolean;
    'watchdog'?: V1Watchdog;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "autoattachGraphicsDevice",
            "baseName": "autoattachGraphicsDevice",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "autoattachMemBalloon",
            "baseName": "autoattachMemBalloon",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "autoattachPodInterface",
            "baseName": "autoattachPodInterface",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "autoattachSerialConsole",
            "baseName": "autoattachSerialConsole",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "blockMultiQueue",
            "baseName": "blockMultiQueue",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "clientPassthrough",
            "baseName": "clientPassthrough",
            "type": "any",
            "format": ""
        },
        {
            "name": "disableHotplug",
            "baseName": "disableHotplug",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "disks",
            "baseName": "disks",
            "type": "Array<V1Disk>",
            "format": ""
        },
        {
            "name": "filesystems",
            "baseName": "filesystems",
            "type": "Array<V1Filesystem>",
            "format": ""
        },
        {
            "name": "gpus",
            "baseName": "gpus",
            "type": "Array<V1GPU>",
            "format": ""
        },
        {
            "name": "hostDevices",
            "baseName": "hostDevices",
            "type": "Array<V1HostDevice>",
            "format": ""
        },
        {
            "name": "inputs",
            "baseName": "inputs",
            "type": "Array<V1Input>",
            "format": ""
        },
        {
            "name": "interfaces",
            "baseName": "interfaces",
            "type": "Array<V1Interface>",
            "format": ""
        },
        {
            "name": "networkInterfaceMultiqueue",
            "baseName": "networkInterfaceMultiqueue",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "rng",
            "baseName": "rng",
            "type": "any",
            "format": ""
        },
        {
            "name": "sound",
            "baseName": "sound",
            "type": "V1SoundDevice",
            "format": ""
        },
        {
            "name": "useVirtioTransitional",
            "baseName": "useVirtioTransitional",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "watchdog",
            "baseName": "watchdog",
            "type": "V1Watchdog",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return V1Devices.attributeTypeMap;
    }

    public constructor() {
    }
}

