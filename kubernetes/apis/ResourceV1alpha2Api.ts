/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IoK8sApiResourceV1alpha2PodSchedulingContext,
    IoK8sApiResourceV1alpha2PodSchedulingContextFromJSON,
    IoK8sApiResourceV1alpha2PodSchedulingContextToJSON,
    IoK8sApiResourceV1alpha2PodSchedulingContextList,
    IoK8sApiResourceV1alpha2PodSchedulingContextListFromJSON,
    IoK8sApiResourceV1alpha2PodSchedulingContextListToJSON,
    IoK8sApiResourceV1alpha2ResourceClaim,
    IoK8sApiResourceV1alpha2ResourceClaimFromJSON,
    IoK8sApiResourceV1alpha2ResourceClaimToJSON,
    IoK8sApiResourceV1alpha2ResourceClaimList,
    IoK8sApiResourceV1alpha2ResourceClaimListFromJSON,
    IoK8sApiResourceV1alpha2ResourceClaimListToJSON,
    IoK8sApiResourceV1alpha2ResourceClaimTemplate,
    IoK8sApiResourceV1alpha2ResourceClaimTemplateFromJSON,
    IoK8sApiResourceV1alpha2ResourceClaimTemplateToJSON,
    IoK8sApiResourceV1alpha2ResourceClaimTemplateList,
    IoK8sApiResourceV1alpha2ResourceClaimTemplateListFromJSON,
    IoK8sApiResourceV1alpha2ResourceClaimTemplateListToJSON,
    IoK8sApiResourceV1alpha2ResourceClass,
    IoK8sApiResourceV1alpha2ResourceClassFromJSON,
    IoK8sApiResourceV1alpha2ResourceClassToJSON,
    IoK8sApiResourceV1alpha2ResourceClassList,
    IoK8sApiResourceV1alpha2ResourceClassListFromJSON,
    IoK8sApiResourceV1alpha2ResourceClassListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateResourceV1alpha2NamespacedPodSchedulingContextRequest {
    namespace: string;
    body: IoK8sApiResourceV1alpha2PodSchedulingContext;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface CreateResourceV1alpha2NamespacedResourceClaimRequest {
    namespace: string;
    body: IoK8sApiResourceV1alpha2ResourceClaim;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface CreateResourceV1alpha2NamespacedResourceClaimTemplateRequest {
    namespace: string;
    body: IoK8sApiResourceV1alpha2ResourceClaimTemplate;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface CreateResourceV1alpha2ResourceClassRequest {
    body: IoK8sApiResourceV1alpha2ResourceClass;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface DeleteResourceV1alpha2CollectionNamespacedPodSchedulingContextRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1alpha2CollectionNamespacedResourceClaimRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1alpha2CollectionNamespacedResourceClaimTemplateRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1alpha2CollectionResourceClassRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1alpha2NamespacedPodSchedulingContextRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1alpha2NamespacedResourceClaimRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1alpha2NamespacedResourceClaimTemplateRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1alpha2ResourceClassRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListResourceV1alpha2NamespacedPodSchedulingContextRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListResourceV1alpha2NamespacedResourceClaimRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListResourceV1alpha2NamespacedResourceClaimTemplateRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListResourceV1alpha2PodSchedulingContextForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListResourceV1alpha2ResourceClaimForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListResourceV1alpha2ResourceClaimTemplateForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListResourceV1alpha2ResourceClassRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchResourceV1alpha2NamespacedPodSchedulingContextRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchResourceV1alpha2NamespacedPodSchedulingContextStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchResourceV1alpha2NamespacedResourceClaimRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchResourceV1alpha2NamespacedResourceClaimStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchResourceV1alpha2NamespacedResourceClaimTemplateRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchResourceV1alpha2ResourceClassRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface ReadResourceV1alpha2NamespacedPodSchedulingContextRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadResourceV1alpha2NamespacedPodSchedulingContextStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadResourceV1alpha2NamespacedResourceClaimRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadResourceV1alpha2NamespacedResourceClaimStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadResourceV1alpha2NamespacedResourceClaimTemplateRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadResourceV1alpha2ResourceClassRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceResourceV1alpha2NamespacedPodSchedulingContextRequest {
    name: string;
    namespace: string;
    body: IoK8sApiResourceV1alpha2PodSchedulingContext;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceResourceV1alpha2NamespacedPodSchedulingContextStatusRequest {
    name: string;
    namespace: string;
    body: IoK8sApiResourceV1alpha2PodSchedulingContext;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceResourceV1alpha2NamespacedResourceClaimRequest {
    name: string;
    namespace: string;
    body: IoK8sApiResourceV1alpha2ResourceClaim;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceResourceV1alpha2NamespacedResourceClaimStatusRequest {
    name: string;
    namespace: string;
    body: IoK8sApiResourceV1alpha2ResourceClaim;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceResourceV1alpha2NamespacedResourceClaimTemplateRequest {
    name: string;
    namespace: string;
    body: IoK8sApiResourceV1alpha2ResourceClaimTemplate;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceResourceV1alpha2ResourceClassRequest {
    name: string;
    body: IoK8sApiResourceV1alpha2ResourceClass;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface WatchResourceV1alpha2NamespacedPodSchedulingContextRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchResourceV1alpha2NamespacedPodSchedulingContextListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchResourceV1alpha2NamespacedResourceClaimRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchResourceV1alpha2NamespacedResourceClaimListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchResourceV1alpha2NamespacedResourceClaimTemplateRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchResourceV1alpha2NamespacedResourceClaimTemplateListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchResourceV1alpha2PodSchedulingContextListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchResourceV1alpha2ResourceClaimListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchResourceV1alpha2ResourceClaimTemplateListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchResourceV1alpha2ResourceClassRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchResourceV1alpha2ResourceClassListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class ResourceV1alpha2Api extends runtime.BaseAPI {

    /**
     * create a PodSchedulingContext
     */
    async createResourceV1alpha2NamespacedPodSchedulingContextRaw(requestParameters: CreateResourceV1alpha2NamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2PodSchedulingContext>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiResourceV1alpha2PodSchedulingContextToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2PodSchedulingContextFromJSON(jsonValue));
    }

    /**
     * create a PodSchedulingContext
     */
    async createResourceV1alpha2NamespacedPodSchedulingContext(requestParameters: CreateResourceV1alpha2NamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2PodSchedulingContext> {
        const response = await this.createResourceV1alpha2NamespacedPodSchedulingContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a ResourceClaim
     */
    async createResourceV1alpha2NamespacedResourceClaimRaw(requestParameters: CreateResourceV1alpha2NamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaim>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createResourceV1alpha2NamespacedResourceClaim.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createResourceV1alpha2NamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiResourceV1alpha2ResourceClaimToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimFromJSON(jsonValue));
    }

    /**
     * create a ResourceClaim
     */
    async createResourceV1alpha2NamespacedResourceClaim(requestParameters: CreateResourceV1alpha2NamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaim> {
        const response = await this.createResourceV1alpha2NamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a ResourceClaimTemplate
     */
    async createResourceV1alpha2NamespacedResourceClaimTemplateRaw(requestParameters: CreateResourceV1alpha2NamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaimTemplate>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiResourceV1alpha2ResourceClaimTemplateToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimTemplateFromJSON(jsonValue));
    }

    /**
     * create a ResourceClaimTemplate
     */
    async createResourceV1alpha2NamespacedResourceClaimTemplate(requestParameters: CreateResourceV1alpha2NamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaimTemplate> {
        const response = await this.createResourceV1alpha2NamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a ResourceClass
     */
    async createResourceV1alpha2ResourceClassRaw(requestParameters: CreateResourceV1alpha2ResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClass>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createResourceV1alpha2ResourceClass.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/resourceclasses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiResourceV1alpha2ResourceClassToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClassFromJSON(jsonValue));
    }

    /**
     * create a ResourceClass
     */
    async createResourceV1alpha2ResourceClass(requestParameters: CreateResourceV1alpha2ResourceClassRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClass> {
        const response = await this.createResourceV1alpha2ResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of PodSchedulingContext
     */
    async deleteResourceV1alpha2CollectionNamespacedPodSchedulingContextRaw(requestParameters: DeleteResourceV1alpha2CollectionNamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteResourceV1alpha2CollectionNamespacedPodSchedulingContext.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of PodSchedulingContext
     */
    async deleteResourceV1alpha2CollectionNamespacedPodSchedulingContext(requestParameters: DeleteResourceV1alpha2CollectionNamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteResourceV1alpha2CollectionNamespacedPodSchedulingContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of ResourceClaim
     */
    async deleteResourceV1alpha2CollectionNamespacedResourceClaimRaw(requestParameters: DeleteResourceV1alpha2CollectionNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteResourceV1alpha2CollectionNamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ResourceClaim
     */
    async deleteResourceV1alpha2CollectionNamespacedResourceClaim(requestParameters: DeleteResourceV1alpha2CollectionNamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteResourceV1alpha2CollectionNamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of ResourceClaimTemplate
     */
    async deleteResourceV1alpha2CollectionNamespacedResourceClaimTemplateRaw(requestParameters: DeleteResourceV1alpha2CollectionNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteResourceV1alpha2CollectionNamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ResourceClaimTemplate
     */
    async deleteResourceV1alpha2CollectionNamespacedResourceClaimTemplate(requestParameters: DeleteResourceV1alpha2CollectionNamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteResourceV1alpha2CollectionNamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of ResourceClass
     */
    async deleteResourceV1alpha2CollectionResourceClassRaw(requestParameters: DeleteResourceV1alpha2CollectionResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/resourceclasses`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ResourceClass
     */
    async deleteResourceV1alpha2CollectionResourceClass(requestParameters: DeleteResourceV1alpha2CollectionResourceClassRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteResourceV1alpha2CollectionResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a PodSchedulingContext
     */
    async deleteResourceV1alpha2NamespacedPodSchedulingContextRaw(requestParameters: DeleteResourceV1alpha2NamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2PodSchedulingContext>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2PodSchedulingContextFromJSON(jsonValue));
    }

    /**
     * delete a PodSchedulingContext
     */
    async deleteResourceV1alpha2NamespacedPodSchedulingContext(requestParameters: DeleteResourceV1alpha2NamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2PodSchedulingContext> {
        const response = await this.deleteResourceV1alpha2NamespacedPodSchedulingContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a ResourceClaim
     */
    async deleteResourceV1alpha2NamespacedResourceClaimRaw(requestParameters: DeleteResourceV1alpha2NamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteResourceV1alpha2NamespacedResourceClaim.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteResourceV1alpha2NamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimFromJSON(jsonValue));
    }

    /**
     * delete a ResourceClaim
     */
    async deleteResourceV1alpha2NamespacedResourceClaim(requestParameters: DeleteResourceV1alpha2NamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaim> {
        const response = await this.deleteResourceV1alpha2NamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a ResourceClaimTemplate
     */
    async deleteResourceV1alpha2NamespacedResourceClaimTemplateRaw(requestParameters: DeleteResourceV1alpha2NamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaimTemplate>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimTemplateFromJSON(jsonValue));
    }

    /**
     * delete a ResourceClaimTemplate
     */
    async deleteResourceV1alpha2NamespacedResourceClaimTemplate(requestParameters: DeleteResourceV1alpha2NamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaimTemplate> {
        const response = await this.deleteResourceV1alpha2NamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a ResourceClass
     */
    async deleteResourceV1alpha2ResourceClassRaw(requestParameters: DeleteResourceV1alpha2ResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClass>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteResourceV1alpha2ResourceClass.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/resourceclasses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClassFromJSON(jsonValue));
    }

    /**
     * delete a ResourceClass
     */
    async deleteResourceV1alpha2ResourceClass(requestParameters: DeleteResourceV1alpha2ResourceClassRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClass> {
        const response = await this.deleteResourceV1alpha2ResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getResourceV1alpha2APIResourcesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getResourceV1alpha2APIResources(initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getResourceV1alpha2APIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind PodSchedulingContext
     */
    async listResourceV1alpha2NamespacedPodSchedulingContextRaw(requestParameters: ListResourceV1alpha2NamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2PodSchedulingContextList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2PodSchedulingContextListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind PodSchedulingContext
     */
    async listResourceV1alpha2NamespacedPodSchedulingContext(requestParameters: ListResourceV1alpha2NamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2PodSchedulingContextList> {
        const response = await this.listResourceV1alpha2NamespacedPodSchedulingContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ResourceClaim
     */
    async listResourceV1alpha2NamespacedResourceClaimRaw(requestParameters: ListResourceV1alpha2NamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaimList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listResourceV1alpha2NamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ResourceClaim
     */
    async listResourceV1alpha2NamespacedResourceClaim(requestParameters: ListResourceV1alpha2NamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaimList> {
        const response = await this.listResourceV1alpha2NamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ResourceClaimTemplate
     */
    async listResourceV1alpha2NamespacedResourceClaimTemplateRaw(requestParameters: ListResourceV1alpha2NamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaimTemplateList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimTemplateListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ResourceClaimTemplate
     */
    async listResourceV1alpha2NamespacedResourceClaimTemplate(requestParameters: ListResourceV1alpha2NamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaimTemplateList> {
        const response = await this.listResourceV1alpha2NamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind PodSchedulingContext
     */
    async listResourceV1alpha2PodSchedulingContextForAllNamespacesRaw(requestParameters: ListResourceV1alpha2PodSchedulingContextForAllNamespacesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2PodSchedulingContextList>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/podschedulingcontexts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2PodSchedulingContextListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind PodSchedulingContext
     */
    async listResourceV1alpha2PodSchedulingContextForAllNamespaces(requestParameters: ListResourceV1alpha2PodSchedulingContextForAllNamespacesRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2PodSchedulingContextList> {
        const response = await this.listResourceV1alpha2PodSchedulingContextForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ResourceClaim
     */
    async listResourceV1alpha2ResourceClaimForAllNamespacesRaw(requestParameters: ListResourceV1alpha2ResourceClaimForAllNamespacesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaimList>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/resourceclaims`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ResourceClaim
     */
    async listResourceV1alpha2ResourceClaimForAllNamespaces(requestParameters: ListResourceV1alpha2ResourceClaimForAllNamespacesRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaimList> {
        const response = await this.listResourceV1alpha2ResourceClaimForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ResourceClaimTemplate
     */
    async listResourceV1alpha2ResourceClaimTemplateForAllNamespacesRaw(requestParameters: ListResourceV1alpha2ResourceClaimTemplateForAllNamespacesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaimTemplateList>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/resourceclaimtemplates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimTemplateListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ResourceClaimTemplate
     */
    async listResourceV1alpha2ResourceClaimTemplateForAllNamespaces(requestParameters: ListResourceV1alpha2ResourceClaimTemplateForAllNamespacesRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaimTemplateList> {
        const response = await this.listResourceV1alpha2ResourceClaimTemplateForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ResourceClass
     */
    async listResourceV1alpha2ResourceClassRaw(requestParameters: ListResourceV1alpha2ResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClassList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/resourceclasses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClassListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ResourceClass
     */
    async listResourceV1alpha2ResourceClass(requestParameters: ListResourceV1alpha2ResourceClassRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClassList> {
        const response = await this.listResourceV1alpha2ResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified PodSchedulingContext
     */
    async patchResourceV1alpha2NamespacedPodSchedulingContextRaw(requestParameters: PatchResourceV1alpha2NamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2PodSchedulingContext>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2PodSchedulingContextFromJSON(jsonValue));
    }

    /**
     * partially update the specified PodSchedulingContext
     */
    async patchResourceV1alpha2NamespacedPodSchedulingContext(requestParameters: PatchResourceV1alpha2NamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2PodSchedulingContext> {
        const response = await this.patchResourceV1alpha2NamespacedPodSchedulingContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified PodSchedulingContext
     */
    async patchResourceV1alpha2NamespacedPodSchedulingContextStatusRaw(requestParameters: PatchResourceV1alpha2NamespacedPodSchedulingContextStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2PodSchedulingContext>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchResourceV1alpha2NamespacedPodSchedulingContextStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchResourceV1alpha2NamespacedPodSchedulingContextStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchResourceV1alpha2NamespacedPodSchedulingContextStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2PodSchedulingContextFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified PodSchedulingContext
     */
    async patchResourceV1alpha2NamespacedPodSchedulingContextStatus(requestParameters: PatchResourceV1alpha2NamespacedPodSchedulingContextStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2PodSchedulingContext> {
        const response = await this.patchResourceV1alpha2NamespacedPodSchedulingContextStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified ResourceClaim
     */
    async patchResourceV1alpha2NamespacedResourceClaimRaw(requestParameters: PatchResourceV1alpha2NamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchResourceV1alpha2NamespacedResourceClaim.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchResourceV1alpha2NamespacedResourceClaim.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchResourceV1alpha2NamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimFromJSON(jsonValue));
    }

    /**
     * partially update the specified ResourceClaim
     */
    async patchResourceV1alpha2NamespacedResourceClaim(requestParameters: PatchResourceV1alpha2NamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaim> {
        const response = await this.patchResourceV1alpha2NamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified ResourceClaim
     */
    async patchResourceV1alpha2NamespacedResourceClaimStatusRaw(requestParameters: PatchResourceV1alpha2NamespacedResourceClaimStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchResourceV1alpha2NamespacedResourceClaimStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchResourceV1alpha2NamespacedResourceClaimStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchResourceV1alpha2NamespacedResourceClaimStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified ResourceClaim
     */
    async patchResourceV1alpha2NamespacedResourceClaimStatus(requestParameters: PatchResourceV1alpha2NamespacedResourceClaimStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaim> {
        const response = await this.patchResourceV1alpha2NamespacedResourceClaimStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified ResourceClaimTemplate
     */
    async patchResourceV1alpha2NamespacedResourceClaimTemplateRaw(requestParameters: PatchResourceV1alpha2NamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaimTemplate>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimTemplateFromJSON(jsonValue));
    }

    /**
     * partially update the specified ResourceClaimTemplate
     */
    async patchResourceV1alpha2NamespacedResourceClaimTemplate(requestParameters: PatchResourceV1alpha2NamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaimTemplate> {
        const response = await this.patchResourceV1alpha2NamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified ResourceClass
     */
    async patchResourceV1alpha2ResourceClassRaw(requestParameters: PatchResourceV1alpha2ResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClass>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchResourceV1alpha2ResourceClass.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchResourceV1alpha2ResourceClass.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/resourceclasses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClassFromJSON(jsonValue));
    }

    /**
     * partially update the specified ResourceClass
     */
    async patchResourceV1alpha2ResourceClass(requestParameters: PatchResourceV1alpha2ResourceClassRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClass> {
        const response = await this.patchResourceV1alpha2ResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified PodSchedulingContext
     */
    async readResourceV1alpha2NamespacedPodSchedulingContextRaw(requestParameters: ReadResourceV1alpha2NamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2PodSchedulingContext>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2PodSchedulingContextFromJSON(jsonValue));
    }

    /**
     * read the specified PodSchedulingContext
     */
    async readResourceV1alpha2NamespacedPodSchedulingContext(requestParameters: ReadResourceV1alpha2NamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2PodSchedulingContext> {
        const response = await this.readResourceV1alpha2NamespacedPodSchedulingContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified PodSchedulingContext
     */
    async readResourceV1alpha2NamespacedPodSchedulingContextStatusRaw(requestParameters: ReadResourceV1alpha2NamespacedPodSchedulingContextStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2PodSchedulingContext>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readResourceV1alpha2NamespacedPodSchedulingContextStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readResourceV1alpha2NamespacedPodSchedulingContextStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2PodSchedulingContextFromJSON(jsonValue));
    }

    /**
     * read status of the specified PodSchedulingContext
     */
    async readResourceV1alpha2NamespacedPodSchedulingContextStatus(requestParameters: ReadResourceV1alpha2NamespacedPodSchedulingContextStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2PodSchedulingContext> {
        const response = await this.readResourceV1alpha2NamespacedPodSchedulingContextStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified ResourceClaim
     */
    async readResourceV1alpha2NamespacedResourceClaimRaw(requestParameters: ReadResourceV1alpha2NamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readResourceV1alpha2NamespacedResourceClaim.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readResourceV1alpha2NamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimFromJSON(jsonValue));
    }

    /**
     * read the specified ResourceClaim
     */
    async readResourceV1alpha2NamespacedResourceClaim(requestParameters: ReadResourceV1alpha2NamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaim> {
        const response = await this.readResourceV1alpha2NamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified ResourceClaim
     */
    async readResourceV1alpha2NamespacedResourceClaimStatusRaw(requestParameters: ReadResourceV1alpha2NamespacedResourceClaimStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readResourceV1alpha2NamespacedResourceClaimStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readResourceV1alpha2NamespacedResourceClaimStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimFromJSON(jsonValue));
    }

    /**
     * read status of the specified ResourceClaim
     */
    async readResourceV1alpha2NamespacedResourceClaimStatus(requestParameters: ReadResourceV1alpha2NamespacedResourceClaimStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaim> {
        const response = await this.readResourceV1alpha2NamespacedResourceClaimStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified ResourceClaimTemplate
     */
    async readResourceV1alpha2NamespacedResourceClaimTemplateRaw(requestParameters: ReadResourceV1alpha2NamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaimTemplate>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimTemplateFromJSON(jsonValue));
    }

    /**
     * read the specified ResourceClaimTemplate
     */
    async readResourceV1alpha2NamespacedResourceClaimTemplate(requestParameters: ReadResourceV1alpha2NamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaimTemplate> {
        const response = await this.readResourceV1alpha2NamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified ResourceClass
     */
    async readResourceV1alpha2ResourceClassRaw(requestParameters: ReadResourceV1alpha2ResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClass>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readResourceV1alpha2ResourceClass.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/resourceclasses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClassFromJSON(jsonValue));
    }

    /**
     * read the specified ResourceClass
     */
    async readResourceV1alpha2ResourceClass(requestParameters: ReadResourceV1alpha2ResourceClassRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClass> {
        const response = await this.readResourceV1alpha2ResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified PodSchedulingContext
     */
    async replaceResourceV1alpha2NamespacedPodSchedulingContextRaw(requestParameters: ReplaceResourceV1alpha2NamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2PodSchedulingContext>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiResourceV1alpha2PodSchedulingContextToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2PodSchedulingContextFromJSON(jsonValue));
    }

    /**
     * replace the specified PodSchedulingContext
     */
    async replaceResourceV1alpha2NamespacedPodSchedulingContext(requestParameters: ReplaceResourceV1alpha2NamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2PodSchedulingContext> {
        const response = await this.replaceResourceV1alpha2NamespacedPodSchedulingContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified PodSchedulingContext
     */
    async replaceResourceV1alpha2NamespacedPodSchedulingContextStatusRaw(requestParameters: ReplaceResourceV1alpha2NamespacedPodSchedulingContextStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2PodSchedulingContext>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceResourceV1alpha2NamespacedPodSchedulingContextStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceResourceV1alpha2NamespacedPodSchedulingContextStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceResourceV1alpha2NamespacedPodSchedulingContextStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiResourceV1alpha2PodSchedulingContextToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2PodSchedulingContextFromJSON(jsonValue));
    }

    /**
     * replace status of the specified PodSchedulingContext
     */
    async replaceResourceV1alpha2NamespacedPodSchedulingContextStatus(requestParameters: ReplaceResourceV1alpha2NamespacedPodSchedulingContextStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2PodSchedulingContext> {
        const response = await this.replaceResourceV1alpha2NamespacedPodSchedulingContextStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified ResourceClaim
     */
    async replaceResourceV1alpha2NamespacedResourceClaimRaw(requestParameters: ReplaceResourceV1alpha2NamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceResourceV1alpha2NamespacedResourceClaim.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceResourceV1alpha2NamespacedResourceClaim.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceResourceV1alpha2NamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiResourceV1alpha2ResourceClaimToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimFromJSON(jsonValue));
    }

    /**
     * replace the specified ResourceClaim
     */
    async replaceResourceV1alpha2NamespacedResourceClaim(requestParameters: ReplaceResourceV1alpha2NamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaim> {
        const response = await this.replaceResourceV1alpha2NamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified ResourceClaim
     */
    async replaceResourceV1alpha2NamespacedResourceClaimStatusRaw(requestParameters: ReplaceResourceV1alpha2NamespacedResourceClaimStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaim>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceResourceV1alpha2NamespacedResourceClaimStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceResourceV1alpha2NamespacedResourceClaimStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceResourceV1alpha2NamespacedResourceClaimStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiResourceV1alpha2ResourceClaimToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimFromJSON(jsonValue));
    }

    /**
     * replace status of the specified ResourceClaim
     */
    async replaceResourceV1alpha2NamespacedResourceClaimStatus(requestParameters: ReplaceResourceV1alpha2NamespacedResourceClaimStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaim> {
        const response = await this.replaceResourceV1alpha2NamespacedResourceClaimStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified ResourceClaimTemplate
     */
    async replaceResourceV1alpha2NamespacedResourceClaimTemplateRaw(requestParameters: ReplaceResourceV1alpha2NamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClaimTemplate>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiResourceV1alpha2ResourceClaimTemplateToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClaimTemplateFromJSON(jsonValue));
    }

    /**
     * replace the specified ResourceClaimTemplate
     */
    async replaceResourceV1alpha2NamespacedResourceClaimTemplate(requestParameters: ReplaceResourceV1alpha2NamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClaimTemplate> {
        const response = await this.replaceResourceV1alpha2NamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified ResourceClass
     */
    async replaceResourceV1alpha2ResourceClassRaw(requestParameters: ReplaceResourceV1alpha2ResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiResourceV1alpha2ResourceClass>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceResourceV1alpha2ResourceClass.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceResourceV1alpha2ResourceClass.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/resourceclasses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiResourceV1alpha2ResourceClassToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiResourceV1alpha2ResourceClassFromJSON(jsonValue));
    }

    /**
     * replace the specified ResourceClass
     */
    async replaceResourceV1alpha2ResourceClass(requestParameters: ReplaceResourceV1alpha2ResourceClassRequest, initOverrides?: RequestInit): Promise<IoK8sApiResourceV1alpha2ResourceClass> {
        const response = await this.replaceResourceV1alpha2ResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind PodSchedulingContext. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchResourceV1alpha2NamespacedPodSchedulingContextRaw(requestParameters: WatchResourceV1alpha2NamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchResourceV1alpha2NamespacedPodSchedulingContext.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/podschedulingcontexts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind PodSchedulingContext. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchResourceV1alpha2NamespacedPodSchedulingContext(requestParameters: WatchResourceV1alpha2NamespacedPodSchedulingContextRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchResourceV1alpha2NamespacedPodSchedulingContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of PodSchedulingContext. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchResourceV1alpha2NamespacedPodSchedulingContextListRaw(requestParameters: WatchResourceV1alpha2NamespacedPodSchedulingContextListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchResourceV1alpha2NamespacedPodSchedulingContextList.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/podschedulingcontexts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of PodSchedulingContext. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchResourceV1alpha2NamespacedPodSchedulingContextList(requestParameters: WatchResourceV1alpha2NamespacedPodSchedulingContextListRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchResourceV1alpha2NamespacedPodSchedulingContextListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchResourceV1alpha2NamespacedResourceClaimRaw(requestParameters: WatchResourceV1alpha2NamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchResourceV1alpha2NamespacedResourceClaim.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchResourceV1alpha2NamespacedResourceClaim.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/resourceclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchResourceV1alpha2NamespacedResourceClaim(requestParameters: WatchResourceV1alpha2NamespacedResourceClaimRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchResourceV1alpha2NamespacedResourceClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchResourceV1alpha2NamespacedResourceClaimListRaw(requestParameters: WatchResourceV1alpha2NamespacedResourceClaimListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchResourceV1alpha2NamespacedResourceClaimList.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/resourceclaims`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchResourceV1alpha2NamespacedResourceClaimList(requestParameters: WatchResourceV1alpha2NamespacedResourceClaimListRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchResourceV1alpha2NamespacedResourceClaimListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchResourceV1alpha2NamespacedResourceClaimTemplateRaw(requestParameters: WatchResourceV1alpha2NamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchResourceV1alpha2NamespacedResourceClaimTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/resourceclaimtemplates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchResourceV1alpha2NamespacedResourceClaimTemplate(requestParameters: WatchResourceV1alpha2NamespacedResourceClaimTemplateRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchResourceV1alpha2NamespacedResourceClaimTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchResourceV1alpha2NamespacedResourceClaimTemplateListRaw(requestParameters: WatchResourceV1alpha2NamespacedResourceClaimTemplateListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchResourceV1alpha2NamespacedResourceClaimTemplateList.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/watch/namespaces/{namespace}/resourceclaimtemplates`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchResourceV1alpha2NamespacedResourceClaimTemplateList(requestParameters: WatchResourceV1alpha2NamespacedResourceClaimTemplateListRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchResourceV1alpha2NamespacedResourceClaimTemplateListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of PodSchedulingContext. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchResourceV1alpha2PodSchedulingContextListForAllNamespacesRaw(requestParameters: WatchResourceV1alpha2PodSchedulingContextListForAllNamespacesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/watch/podschedulingcontexts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of PodSchedulingContext. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchResourceV1alpha2PodSchedulingContextListForAllNamespaces(requestParameters: WatchResourceV1alpha2PodSchedulingContextListForAllNamespacesRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchResourceV1alpha2PodSchedulingContextListForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchResourceV1alpha2ResourceClaimListForAllNamespacesRaw(requestParameters: WatchResourceV1alpha2ResourceClaimListForAllNamespacesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/watch/resourceclaims`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchResourceV1alpha2ResourceClaimListForAllNamespaces(requestParameters: WatchResourceV1alpha2ResourceClaimListForAllNamespacesRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchResourceV1alpha2ResourceClaimListForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchResourceV1alpha2ResourceClaimTemplateListForAllNamespacesRaw(requestParameters: WatchResourceV1alpha2ResourceClaimTemplateListForAllNamespacesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/watch/resourceclaimtemplates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchResourceV1alpha2ResourceClaimTemplateListForAllNamespaces(requestParameters: WatchResourceV1alpha2ResourceClaimTemplateListForAllNamespacesRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchResourceV1alpha2ResourceClaimTemplateListForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ResourceClass. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchResourceV1alpha2ResourceClassRaw(requestParameters: WatchResourceV1alpha2ResourceClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchResourceV1alpha2ResourceClass.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/watch/resourceclasses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ResourceClass. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchResourceV1alpha2ResourceClass(requestParameters: WatchResourceV1alpha2ResourceClassRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchResourceV1alpha2ResourceClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ResourceClass. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchResourceV1alpha2ResourceClassListRaw(requestParameters: WatchResourceV1alpha2ResourceClassListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/resource.k8s.io/v1alpha2/watch/resourceclasses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ResourceClass. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchResourceV1alpha2ResourceClassList(requestParameters: WatchResourceV1alpha2ResourceClassListRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchResourceV1alpha2ResourceClassListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
